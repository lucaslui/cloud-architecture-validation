<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Broker Parameters">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BrokerHost" elementType="Argument">
            <stringProp name="Argument.name">BrokerHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BrokerPort" elementType="Argument">
            <stringProp name="Argument.name">BrokerPort</stringProp>
            <stringProp name="Argument.value">1883</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Topic" elementType="Argument">
            <stringProp name="Argument.name">Topic</stringProp>
            <stringProp name="Argument.value">ingestion/telemetry</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QoS" elementType="Argument">
            <stringProp name="Argument.name">QoS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TlsEnabled" elementType="Argument">
            <stringProp name="Argument.name">TlsEnabled</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Parameters">
        <collectionProp name="Arguments.arguments">
          <elementProp name="NumberHomes" elementType="Argument">
            <stringProp name="Argument.name">NumberHomes</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberMessages" elementType="Argument">
            <stringProp name="Argument.name">NumberMessages</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PayloadSize" elementType="Argument">
            <stringProp name="Argument.name">PayloadSize</stringProp>
            <stringProp name="Argument.value">14336</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DelayPerMessageMs" elementType="Argument">
            <stringProp name="Argument.name">DelayPerMessageMs</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Infrastructure Parameters">
        <collectionProp name="Arguments.arguments">
          <elementProp name="RampUpTimeSec" elementType="Argument">
            <stringProp name="Argument.name">RampUpTimeSec</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SAMPLES_DIR" elementType="Argument">
            <stringProp name="Argument.name">SAMPLES_DIR</stringProp>
            <stringProp name="Argument.value">/home/lucasmotta/Desktop/cloud-architecture-validation/ingestion-environment/samples</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group (Publishers)" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${NumberHomes}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RampUpTimeSec}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Time (Group Threads)" enabled="true">
          <stringProp name="groupSize">${NumberHomes}</stringProp>
          <longProp name="timeoutInMs">10000</longProp>
        </SyncTimer>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">HOME_NUMBER</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <net.xmeter.samplers.ConnectSampler guiclass="net.xmeter.gui.ConnectSamplerUI" testclass="net.xmeter.samplers.ConnectSampler" testname="MQTT Connect - Publisher" enabled="true">
            <stringProp name="mqtt.server">${BrokerHost}</stringProp>
            <stringProp name="mqtt.port">${BrokerPort}</stringProp>
            <stringProp name="mqtt.version">3.1.1</stringProp>
            <stringProp name="mqtt.conn_timeout">10</stringProp>
            <stringProp name="mqtt.protocol">TCP</stringProp>
            <stringProp name="mqtt.ws_path"></stringProp>
            <boolProp name="mqtt.dual_ssl_authentication">false</boolProp>
            <stringProp name="mqtt.clientcert_file_path"></stringProp>
            <stringProp name="mqtt.clientcert_password"></stringProp>
            <stringProp name="mqtt.user_name"></stringProp>
            <stringProp name="mqtt.password"></stringProp>
            <stringProp name="mqtt.client_id_prefix">conn_pub_</stringProp>
            <boolProp name="mqtt.client_id_suffix">true</boolProp>
            <stringProp name="mqtt.conn_keep_alive">600</stringProp>
            <stringProp name="mqtt.conn_attampt_max">0</stringProp>
            <stringProp name="mqtt.reconn_attampt_max">0</stringProp>
            <stringProp name="mqtt.conn_clean_session">true</stringProp>
          </net.xmeter.samplers.ConnectSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <stringProp name="LoopController.loops">${NumberMessages}</stringProp>
        </LoopController>
        <hashTree>
          <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="MQTT Pub Sampler (Random Payload w/ Fixed Size)" enabled="false">
            <stringProp name="mqtt.topic_name">${Topic}</stringProp>
            <stringProp name="mqtt.qos_level">${QoS}</stringProp>
            <boolProp name="mqtt.add_timestamp">true</boolProp>
            <stringProp name="mqtt.message_type">Random string with fixed length</stringProp>
            <stringProp name="mqtt.message_type_fixed_length">${PayloadSize}</stringProp>
            <stringProp name="mqtt.message_to_sent">{&quot;teste&quot;: 123}</stringProp>
            <boolProp name="mqtt.retained_message">false</boolProp>
          </net.xmeter.samplers.PubSampler>
          <hashTree/>
          <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="MQTT Pub Sampler (Defined Payload)" enabled="false">
            <stringProp name="mqtt.topic_name">${Topic}</stringProp>
            <stringProp name="mqtt.qos_level">${QoS}</stringProp>
            <boolProp name="mqtt.add_timestamp">false</boolProp>
            <stringProp name="mqtt.message_type">String</stringProp>
            <stringProp name="mqtt.message_type_fixed_length">${PayloadSize}</stringProp>
            <stringProp name="mqtt.message_to_sent">{&quot;deviceId&quot;:&quot;EV-${__RandomString(6,abcdef0123456789)}&quot;,&quot;deviceType&quot;:&quot;ElectricVehicle&quot;,&quot;eventType&quot;:&quot;Telemetry&quot;,&quot;schemaVersion&quot;:&quot;1.0&quot;,&quot;timestamp&quot;:&quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;)}&quot;,&quot;payload&quot;:{&quot;stateOfCharge&quot;:${__Random(10,100)},&quot;estimatedChargingTime&quot;:${__Random(600,14400)},&quot;voltage&quot;:${__Random(210,230)},&quot;current&quot;:${__Random(5,32)},&quot;activePower&quot;:${__Random(1000,7000)}},&quot;metadata&quot;:{&quot;regionId&quot;:&quot;SP-Campinas-${__Random(1,5)}&quot;,&quot;deviceLocation&quot;:&quot;Garage&quot;,&quot;deviceCategory&quot;:&quot;EV&quot;,&quot;deviceModel&quot;:&quot;TeslaModel${__Random(1,3)}&quot;,&quot;endUserId&quot;:&quot;user-${__Random(1,9999)}&quot;,&quot;contractType&quot;:&quot;${__chooseRandom(TimeOfUse|Conventional)}&quot;,&quot;programs&quot;:[&quot;DemandResponse&quot;,&quot;RenewableIntegration&quot;]}}
</stringProp>
            <boolProp name="mqtt.retained_message">false</boolProp>
          </net.xmeter.samplers.PubSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (Delay Per Message Ms)" enabled="false">
            <stringProp name="ConstantTimer.delay">${DelayPerMessageMs}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${NumberMessages}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.concurrent.ThreadLocalRandom
import org.apache.commons.io.FileUtils
import org.apache.jmeter.engine.util.CompoundVariable

// ===== Configs =====
def base = vars.get(&apos;SAMPLES_DIR&apos;)
if (!base) throw new IllegalStateException(&apos;SAMPLES_DIR não definido (use -JSAMPLES_DIR=/abs/path/para/samples)&apos;)

// Pesos Telemetry/State (ajuste via -JTELEMETRY_WEIGHT / -JSTATE_WEIGHT)
int wTel = (props.get(&apos;TELEMETRY_WEIGHT&apos;) ?: &apos;80&apos;) as int
int wSta = (props.get(&apos;STATE_WEIGHT&apos;)   ?: &apos;20&apos;) as int
boolean includeState = ((props.get(&apos;INCLUDE_STATE&apos;) ?: &apos;yes&apos;).equalsIgnoreCase(&apos;yes&apos;))

// Catálogo de arquivos (ajuste p/ sua árvore)
def all = [
  [path:&apos;appliances/dish-washer-telemetry.json&apos;,  deviceType:&apos;Appliance&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;appliances/dish-washer-state.json&apos;,      deviceType:&apos;Appliance&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;appliances/refrigerator-telemetry.json&apos;, deviceType:&apos;Appliance&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;appliances/refrigerator-state.json&apos;,     deviceType:&apos;Appliance&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;appliances/television-telemetry.json&apos;,   deviceType:&apos;Appliance&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;appliances/television-state.json&apos;,       deviceType:&apos;Appliance&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;appliances/washing-machine-telemetry.json&apos;, deviceType:&apos;Appliance&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;appliances/washing-machine-state.json&apos;,     deviceType:&apos;Appliance&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;battery-bank-telemetry.json&apos;, deviceType:&apos;BatteryBank&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;battery-bank-state.json&apos;,     deviceType:&apos;BatteryBank&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;env-sensor-telemetry.json&apos;, deviceType:&apos;EnvironmentalSensor&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;env-sensor-state.json&apos;,     deviceType:&apos;EnvironmentalSensor&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;ev-telemetry.json&apos;, deviceType:&apos;ElectricVehicle&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;ev-state.json&apos;,     deviceType:&apos;ElectricVehicle&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;hvac-telemetry.json&apos;, deviceType:&apos;HVAC&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;hvac-state.json&apos;,     deviceType:&apos;HVAC&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;res-telemetry.json&apos;, deviceType:&apos;RES&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;res-state.json&apos;,     deviceType:&apos;RES&apos;, eventType:&apos;State&apos;,     weight:wSta],
  [path:&apos;smart-meter-telemetry.json&apos;, deviceType:&apos;SmartMeter&apos;, eventType:&apos;Telemetry&apos;, weight:wTel],
  [path:&apos;smart-meter-state.json&apos;,     deviceType:&apos;SmartMeter&apos;, eventType:&apos;State&apos;,     weight:wSta],
]
def entries = includeState ? all : all.findAll{ it.eventType == &apos;Telemetry&apos; }

// Escolha ponderada
int total = entries.sum{ it.weight as int } as int
int r = ThreadLocalRandom.current().nextInt(Math.max(total,1))
def pick = null; int acc = 0
for (e in entries){ acc += (e.weight as int); if (r &lt; acc){ pick = e; break } }
if (pick == null) throw new IllegalStateException(&apos;Nenhum payload selecionado&apos;)

// Lê arquivo
def file = new File(base, pick.path)
if (!file.exists()) throw new FileNotFoundException(&quot;Arquivo não encontrado: &quot; + file)
def raw = FileUtils.readFileToString(file, &apos;UTF-8&apos;)

// Substitui __chooseRandom(...) mesmo sem plugin (suporta &apos;,&apos; ou &apos;|&apos;)
raw = raw.replaceAll(/\$\{__chooseRandom\(([^}]*)\)\}/) { allTxt, inside -&gt;
  def opts = inside.split(/[|,]/).collect{ it.trim() }.findAll{ it }
  if (opts.isEmpty()) return allTxt
  opts[ThreadLocalRandom.current().nextInt(opts.size())]
}

// Avalia demais funções do JMeter no texto (ex.: __Random, __time, etc.)
def evaluated = new CompoundVariable(raw).execute()

// Injeta no payload do sampler
vars.put(&apos;BODY&apos;, evaluated)

// (Opcional) debug:
// log.info(&quot;HEMS -&gt; &quot; + pick.path + &quot;  bytes=&quot; + evaluated.length())
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <net.xmeter.samplers.PubSampler guiclass="net.xmeter.gui.PubSamplerUI" testclass="net.xmeter.samplers.PubSampler" testname="MQTT Pub Sampler (Defined Payload)">
            <stringProp name="mqtt.topic_name">${Topic}</stringProp>
            <stringProp name="mqtt.qos_level">${QoS}</stringProp>
            <boolProp name="mqtt.add_timestamp">false</boolProp>
            <stringProp name="mqtt.message_type">String</stringProp>
            <stringProp name="mqtt.message_type_fixed_length">${PayloadSize}</stringProp>
            <stringProp name="mqtt.message_to_sent">${BODY}
</stringProp>
            <boolProp name="mqtt.retained_message">false</boolProp>
          </net.xmeter.samplers.PubSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (Delay Per Message Ms)" enabled="true">
            <stringProp name="ConstantTimer.delay">${DelayPerMessageMs}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
