# ======== Globais / Storage ========
global:
  storageClass: "longhorn"

# ======== Imagem ========
image:
  registry: docker.io
  repository: bitnami/minio
  tag: latest
  pullPolicy: IfNotPresent
  debug: false

clientImage:
  registry: docker.io
  repository: bitnami/minio-client
  tag: latest
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

defaultInitContainers:
  volumePermissions:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: "12-debian-12-r50"
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
    containerSecurityContext:
      enabled: true
      runAsUser: 0
      allowPrivilegeEscalation: false
      capabilities:
        add: ["CHOWN"]
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault

containerPorts:
  api: 9000

# ======== Autenticação (via Secret existente) ========
auth:
  useSecret: true
  usePasswordFiles: true
  existingSecret: minio-auth
  rootUserSecretKey: MINIO_ACCESS_KEY
  rootPasswordSecretKey: MINIO_SECRET_KEY
  forceNewKeys: false
  forcePassword: false
  # (rootUser/rootPassword vêm do Secret)

# ======== Modo de implantação ========
mode: standalone

# ======== Buckets padrão ========
defaultBuckets: "data-lakehouse"

# provisioning:
#   enabled: true
#   buckets:
#     - name: data-lakehouse
#       policy: none

# ======== Persistência ========
persistence:
  enabled: true
  accessModes: ["ReadWriteOnce"]
  size: 10Gi
  mountPath: /bitnami/minio/data
  # storageClass herdado de global.storageClass

extraVolumeMounts: []
extraVolumes: []

# ======== Service (API) ========
service:
  type: ClusterIP
  ports:
    api: 9000

# ======== Recursos (pods do servidor MinIO) ========
resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: "1"
    memory: 2Gi
resourcesPreset: micro

# ======== TLS ========
tls:
  enabled: false
  autoGenerated:
    enabled: true # ignorado quando tls.enabled=false

# ======== Console (Object Browser) ========
console:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/minio-object-browser
    tag: 2.0.2-debian-12-r3
    pullPolicy: IfNotPresent
  containerPorts:
    http: 9090
  consolePort: 9001
  service:
    type: ClusterIP
    ports:
      http: 9001
  resourcesPreset: small
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1
  pdb:
    create: true
  networkPolicy:
    enabled: true
    allowExternal: true
    addExternalClientAccess: true
    allowExternalEgress: true

# ======== StatefulSet ========
statefulset:
  replicaCount: 1
  drivesPerNode: 1
  zones: 1
  podManagementPolicy: Parallel

# ======== Probes da API ========
livenessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 5
  successThreshold: 1

# ======== NetworkPolicy (API) ========
networkPolicy:
  enabled: true
  allowExternal: true
  addExternalClientAccess: true
  allowExternalEgress: true

# ======== Pod Security Contexts ========
podSecurityContext:
  enabled: true
  fsGroup: 1001
  fsGroupChangePolicy: OnRootMismatch

containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  privileged: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: RuntimeDefault

# ======== ServiceAccount ========
serviceAccount:
  create: true
  automountServiceAccountToken: false

# ======== PDB ========
pdb:
  create: true

# ======== Ingress (desativado por padrão) ========
ingress:
  enabled: false
# console:
#   ingress:
#     enabled: false
