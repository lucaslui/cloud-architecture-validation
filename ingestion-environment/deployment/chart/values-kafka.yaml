fullnameOverride: kafka
interBrokerProtocolVersion: "3.9"

image:
  registry: docker.io
  repository: bitnami/kafka
  tag: 3.9.0-debian-12-r9
  pullPolicy: IfNotPresent
  debug: true

sasl:
  interBrokerMechanism: "PLAIN"
  controllerMechanism: "PLAIN"
  enabledMechanisms: "PLAIN,SCRAM-SHA-256,SCRAM-SHA-512"
  existingSecret: ""
  interbroker:
    user: ""
    password: ""
    clientId: ""
    clientSecret: ""
  controller:
    user: ""
    password: ""
    clientId: ""
    clientSecret: ""

listeners:
  securityProtocolMap: "PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT"
  client:
    name: CLIENT
    protocol: "PLAINTEXT"
    containerPort: 9092
  interbroker:
    name: INTERNAL
    protocol: "PLAINTEXT"
    containerPort: 9094
  controller:
    name: CONTROLLER
    protocol: "PLAINTEXT"
    containerPort: 9093
  external:
    name: EXTERNAL
    protocol: "PLAINTEXT"
    containerPort: 9095

tls:
  autoGenerated:
    enabled: false

podSecurityContext:
  enabled: true
  fsGroup: 1001
  fsGroupChangePolicy: Always

service:
  type: ClusterIP
  ports:
    client: 9092
    interbroker: 9094
    controller: 9093
    external: 9095

externalAccess:
  enabled: false
  controller:
    forceExpose: false
    service:
      type: ClusterIP
      domain: cluster.local
      nodePorts: []
      externalIPs: []
      loadBalancerSourceRanges: []
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []
  broker:
    service:
      type: ClusterIP
      domain: cluster.local
      nodePorts: []
      externalIPs: []
      loadBalancerSourceRanges: []
      loadBalancerIPs: []
      loadBalancerNames: []
      loadBalancerAnnotations: []

kraftVersion: 1

defaultInitContainers:
  autoDiscovery:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.33.4-debian-12-r0
      pullPolicy: IfNotPresent
  volumePermissions:
    enabled: false
    resourcesPreset: "nano"
    resources: {}
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r51
      pullPolicy: IfNotPresent
    containerSecurityContext:
      enabled: true
      runAsUser: 0
      runAsNonRoot: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
  prepareConfig:
    resourcesPreset: "nano"
    resources: {}
    containerSecurityContext:
      enabled: true
      runAsUser: 0
      runAsNonRoot: false
      readOnlyRootFilesystem: false
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
    # extraInit: ""
    extraInit: |
      set -euo pipefail
      install -d -m 0775 -o 1001 -g 1001 /bitnami/kafka
      install -d -m 0775 -o 1001 -g 1001 /bitnami/kafka/logs
      install -d -m 0775 -o 1001 -g 1001 /bitnami/kafka/meta
      chown -R 1001:1001 /bitnami/kafka
      chmod -R ug+rwX /bitnami/kafka

controller:
  replicaCount: 1
  controllerOnly: true
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 512Mi
  # resourcesPreset: "nano"
  quorumBootstrapServers: "kafka-controller-headless:9093"
  config:
    log.dirs: "/bitnami/kafka/logs"
    metadata.log.dir: "/bitnami/kafka/meta"
  persistence:
    enabled: true
    size: 3Gi
    accessModes:
      - ReadWriteOnce
    storageClass: longhorn
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    mountPath: /opt/bitnami/kafka/logs
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
  minId: 0
  overrideConfiguration:
    process.roles: "controller"
    controller.listener.names: "CONTROLLER"
    controller.quorum.voters: "0@kafka-controller-0.kafka-controller-headless.ingestion-environment-namespace.svc.cluster.local:9093"
    listeners: "CONTROLLER://:9093"
    advertised.listeners: "CONTROLLER://kafka-controller-0.kafka-controller-headless.ingestion-environment-namespace.svc.cluster.local:9093"
    listener.security.protocol.map: "CONTROLLER:PLAINTEXT"

broker:
  replicaCount: 1
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  # resourcesPreset: "small"
  persistence:
    enabled: true
    size: 3Gi
    accessModes:
      - ReadWriteOnce
    storageClass: longhorn
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    mountPath: /opt/bitnami/kafka/logs
  config:
    log.dirs: "/bitnami/kafka/logs"
    metadata.log.dir: "/bitnami/kafka/meta"
    auto.create.topics.enable: "true"
    num.partitions: "2"
    default.replication.factor: "1"
    min.insync.replicas: "1"
    offsets.topic.replication.factor: "1"
    transaction.state.log.replication.factor: "1"
    transaction.state.log.min.isr: "1"
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
  minId: 100
  overrideConfiguration:
    process.roles: "broker"
    controller.listener.names: "CONTROLLER"
    controller.quorum.voters: "0@kafka-controller-0.kafka-controller-headless.ingestion-environment-namespace.svc.cluster.local:9093"
    listeners: "CLIENT://:9092,INTERNAL://:9094"
    advertised.listeners: >
      CLIENT://kafka:9092,
      INTERNAL://kafka-broker-0.kafka-broker-headless.ingestion-environment-namespace.svc.cluster.local:9094
    listener.security.protocol.map: "CLIENT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
    inter.broker.listener.name: "INTERNAL"
    
provisioning:
  enabled: false
  waitForKafka: true
  resourcesPreset: "micro"
  topics:
    - name: raw-events-topic
      partitions: 2
      replicationFactor: 1
    - name: raw-events-dlq
      partitions: 1
      replicationFactor: 1
    - name: validated-events-topic
      partitions: 2
      replicationFactor: 1
    - name: validated-events-dlq
      partitions: 1
      replicationFactor: 1
    - name: enriched-events-topic
      partitions: 2
      replicationFactor: 1
    - name: enriched-events-dlq
      partitions: 1
      replicationFactor: 1

metrics:
  jmx:
    enabled: false
    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 1.4.0-debian-12-r0
      pullPolicy: IfNotPresent

diagnosticMode:
  enabled: false
  command: ["sleep"]
  args: ["infinity"]
